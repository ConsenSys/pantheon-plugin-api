import net.ltgt.gradle.errorprone.CheckSeverity
import java.security.MessageDigest

plugins {
  id 'java-library'
  id 'maven-publish'

  id 'com.diffplug.gradle.spotless' version '3.19.0'
  id 'com.jfrog.bintray' version '1.8.4'
  id 'com.github.ben-manes.versions' version '0.21.0'
  id 'com.github.hierynomus.license' version '0.15.0'
  id 'io.spring.dependency-management' version '1.0.7.RELEASE'
  id 'net.ltgt.errorprone' version '0.7.1'
  id 'net.researchgate.release' version '2.7.0'
}

if (!JavaVersion.current().java11Compatible) {
  throw new GradleException("Java 11 or later is required to build Pantheon.\n" +
  "  Detected version ${JavaVersion.current()}")
}

apply from: 'gradle/versions.gradle'
apply from: 'gradle/check-licenses.gradle'

sourceCompatibility = 11
targetCompatibility = 11
group = 'tech.pegasys.pantheon'

defaultTasks 'build', 'checkLicenses', 'javadoc'

repositories {
  if ("$System.env.JENKINS_URL" == 'https://jenkins.pegasys.tech/') {
    maven { url "https://nexus.int.pegasys.tech/repository/consensys-pegasys/" }
    maven { url "https://nexus.int.pegasys.tech/repository/jcenter/" }
  } else {
    jcenter()
    mavenLocal()
    maven { url "https://consensys.bintray.com/pegasys-repo" }
    mavenCentral()
  }
}

dependencies { errorprone("com.google.errorprone:error_prone_core") }

spotless {
  java {
    // This path needs to be relative to each project
    target fileTree('.') { include '**/src/*/java/**/*.java' }
    removeUnusedImports()
    googleJavaFormat('1.7')
    importOrder 'tech.pegasys', 'java', ''
    trimTrailingWhitespace()
    endWithNewline()
    licenseHeaderFile "${rootDir}/gradle/spotless.java.license"
  }
  groovyGradle {
    target '*.gradle'
    greclipse().configFile(rootProject.file('gradle/formatter.properties'))
    endWithNewline()
    paddedCell()
  }
}

jar { dependsOn checkLicenses }

class FileStateChecker extends DefaultTask {
  Set<File> files
  String knownHash

  @TaskAction
  def CheckState() {
    def digestor = MessageDigest.getInstance("SHA-256")

    this.files.sort().each {
      digestor.update(it.readBytes())
    }
    def currentHash = digestor.digest()encodeBase64().toString()
    if (this.knownHash != currentHash) {
      throw new GradleException("""For the Plugin APIs the checksum of the project did not match what was expected.

If this is a deliberate change where you have thought through backwards compatibility,
then update "Expected" for "Calculated" in the appropriate build.gradle as the knownHash for this task.
Expected   : ${this.knownHash}
Calculated : ${currentHash}
""")
    }
  }
}

tasks.register('checkAPIChanges', FileStateChecker) {
  description = "Checks that the API for the Plugin-API project does not change without deliberate thought"
  files = sourceSets.main.allJava.files
  knownHash = 'PBo0D4R6/1EYXEn+k0nmWHW4TkklUWQbQGNqgWzslfw='
}
check.dependsOn('checkAPIChanges')


tasks.withType(JavaCompile) {
  options.compilerArgs += [
    '-Xlint:unchecked',
    '-Xlint:cast',
    '-Xlint:rawtypes',
    '-Xlint:overloads',
    '-Xlint:divzero',
    '-Xlint:finally',
    '-Xlint:static',
    '-Werror',
  ]

  options.errorprone {
    excludedPaths '.*/(generated/*.*|.*ReferenceTest_.*)'

    // Our equals need to be symmetric, this checker doesn't respect that.
    check('EqualsGetClass', CheckSeverity.OFF)
    // We like to use futures with no return values.
    check('FutureReturnValueIgnored', CheckSeverity.OFF)
    // We use the JSR-305 annotations instead of the Google annotations.
    check('ImmutableEnumChecker', CheckSeverity.OFF)
    // This is a style check instead of an error-prone pattern.
    check('UnnecessaryParentheses', CheckSeverity.OFF)
    // Lazy impl causes excess CPU usage O(n) of non-final field when it should be O(1).
    check('FieldCanBeFinal', CheckSeverity.OFF)

    // This check is broken in Java 12.  See https://github.com/google/error-prone/issues/1257
    if (JavaVersion.current().java12Compatible) {
      check('Finally', CheckSeverity.OFF)
    }

    check('InsecureCryptoUsage', CheckSeverity.WARN)
    check('WildcardImport', CheckSeverity.WARN)
  }

  options.encoding = 'UTF-8'
  options.fork = true
  options.incremental = true
}

// Normalise Xdoclint behaviour across JDKs (OpenJDK 8 is more lenient than Oracle JDK by default).
javadoc {
  options.addStringOption('Xdoclint:all', '-quiet')
  if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
    options.addStringOption('Xwerror', '-quiet')
  } else {
    options.addStringOption('Xwerror', '-html5')
  }
  options.encoding = 'UTF-8'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier = 'javadoc'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      versionMapping {
        usage('java-api') { fromResolutionOf('runtimeClasspath') }
        usage('java-runtime') { fromResolutionResult() }
      }
      pom {
        name = 'Pantheon Plugins Library'
        description = 'Core Plugins Libraries for Pantheon'
        url = 'http://github.com/PegaSysEng/pantheon-plugin-api'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/PegaSysEng/pantheon-plugin-api.git'
          developerConnection = 'scm:git:ssh://github.com/PegaSysEng/pantheon-plugin-api.git'
          url = 'https://github.com/PegaSysEng/pantheon-plugin-api'
        }
      }
    }
  }
  repositories {
    maven {
      // change URLs to point to your repos, e.g. http://my.org/repo
      def releasesRepoUrl = "$buildDir/repos/releases"
      def snapshotsRepoUrl = "$buildDir/repos/snapshots"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
  }
}

bintray {
  user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')

  publications=['mavenJava']

  publish = true
  override = version.endsWith('SNAPSHOT')

  pkg {
    repo = 'pegasys-repo'
    name = 'pantheon'
    userOrg = 'consensys'
    licenses = ['Apache-2.0']
    websiteUrl = 'https://github.com/PegaSysEng/pantheon'
    issueTrackerUrl = 'https://github.com/PegaSysEng/pantheon/issues'
    vcsUrl = 'https://github.com/PegaSysEng/pantheon.git'

    version {
      name = project.version
      released  = new Date()
    }
  }
}

afterReleaseBuild.dependsOn bintrayUpload
bintrayUpload.mustRunAfter publishToMavenLocal
